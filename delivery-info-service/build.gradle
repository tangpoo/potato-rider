plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'jacoco'
}

group = 'com.potatorider'
version = '0.0.1-SNAPSHOT'
def jacocoMinimumCoverageRatio = 0.60
def jarFileName = 'delivery-info-service'

bootJar {
    archiveBaseName.set(jarFileName)
    launchScript()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java.srcDir "$projectDir/src/integrationTest/java"
        resources.srcDir "$projectDir/src/integrationTest/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

task integrationTest(type: Test) {
    description = 'Delivery-Info-Service : Integration Test'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnitPlatform()
}

check {
    dependsOn integrationTest
}

tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
    jacocoTestReport {
        reports {
            xml.required = false
            csv.required = false
            html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        }
    }
}

jacocoTestReport {
    dependsOn test
    sourceSets sourceSets.main
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect{
            fileTree(dir: it, excludes: [
                    "com/potatorider/Application.*"
            ])
        }))
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = jacocoMinimumCoverageRatio
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = jacocoMinimumCoverageRatio
            }
        }
    }
}

task generateJacocoTestCoverage(type: JacocoReport) {
    group 'verification'
    description 'Runs tests with coverage'

    dependsOn = [test, jacocoTestReport, jacocoTestCoverageVerification]

    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
}

ext {
    set('springCloudVersion', "2021.0.1")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springdoc:springdoc-openapi-webflux-ui:1.6.3'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation "org.springframework.cloud:spring-cloud-starter-sleuth"
    implementation "org.springframework.cloud:spring-cloud-sleuth-zipkin"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:4.13.1'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'

    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


